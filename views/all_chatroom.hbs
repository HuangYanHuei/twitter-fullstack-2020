<section id="Huei-region" class="">
  <div class="flex-message-page">
    <!--左側導覽列-->
    <section class="left-region-sidebar">
      {{> home-tabs-middleware-ByYS route='message'}}
    </section>

    <div class="d-flex">
      <!--使用者清單 開始-->
      <div class="public-message-user">
        <ul class="ul-user-online" id="allUserList">
          <!--每一個使用者 開始-->

          <!--每一個使用者 結束-->
        </ul>
      </div>
      <!--使用者清單 結束-->

      <!--聊天室 開始-->
      <div class="public-message">
        <div class="public-message-title">
          <span class="title-span">公開聊天室</span>
        </div>
        <div class="public-message-middle">
          <ul class="ul-public-message" id="public-message" style="height:100%;display: flex;
flex-direction: column;">

            <li class="li-left-message" style="flex: 1;"></li>
            {{!-- 聊天室內容<li></li>>，一開始為空 --}}

          </ul>
        </div>
        <!--聊天輸入框 開始-->
        <form id="public-message-form" action="">
          <div class="public-message-footer">
            <input id="messageInput" type="text" placeholder="請輸入訊息 ..." maxlength="160" class="public-message-input">
            <button class="send-btn" type="button">
              <img src="/images/submit.png" alt="">
            </button>
          </div>
        </form>
        <!--聊天輸入框 結束-->
      </div>
      <!--聊天室 結束-->
    </div>

    <!--socketIo script 開始-->
    <script>
      // step 1 ---- 建立連線
      const AllChatroomSocket = io("/all_chatroom")

      AllChatroomSocket.auth = { userId: '{{loginUser.id}}' }
      const loginUserId = Number('{{loginUser.id}}')

      AllChatroomSocket.emit('login')

      // 抓取必要的 DOM
      const allUserListDOM = document.getElementById('allUserList')
      const scrollbarRegion = document.querySelector('.public-message-middle')
      const messagesDOM = document.getElementById('public-message')
      const form = document.getElementById('public-message-form')
      const input = document.getElementById('messageInput')


      // step2 ----  input 欄位 做 socket.emit 傳入 server
      form.addEventListener('submit', function (e) {
        e.preventDefault()
        if (input.value) {
          // socket.emit 可以針對頻道傳送物件
          AllChatroomSocket.emit('chat message', input.value)
          input.value = ''
        }
      })


      // step3 ----  chat message 時時更新聊天室  
      AllChatroomSocket.on('chat message', function (receivedObj) {
        showMessageOnChatBox(receivedObj)
      })


      // ---- ---- ---- 全體廣播頻道 ----刷新在線使用者列表 ----
      AllChatroomSocket.on('broadcast', (usersData) => {
        const usersArray = Object.values(usersData)

        //  userList 顯示邏輯 --- 
        let rawHTML = `
          <li class="li-user-online">
            <span class="user-title-span">上線使用者&nbsp;&nbsp;(${usersArray.length})</span>
          </li>
        `
        usersArray.forEach((user) => {
          rawHTML +=
            `
          <li class='li-user-online'>
            <img src="${user.avatar}"
              class="tweet-user-avatar" style="width:50px;height:50px;display:inline-block;" alt="Picture">
            <a class="li-name" href="/users/${user.id}/tweets">${user.name}</a>
            <a class="li-account" href="/users/${user.id}/tweets">@${user.account}</a>
          </li>
          `
          allUserListDOM.innerHTML = rawHTML
        })

      })

      // ---- ---- ---- 使用者登入事件 ---- ---- ----
      AllChatroomSocket.on('loginEvent', (userData) => {
        //  userLogin 顯示邏輯 --- 
        const userStatus = document.createElement('li')
        userStatus.className = 'li-status-message'
        userStatus.innerHTML =
          `
          <span class="span-status-message">
            ${userData.name} 上線了
          </span>
          `
        messagesDOM.appendChild(userStatus)
        scrollbarRegion.scrollTo(0, document.body.scrollHeight)
      })

      // ---- ---- ---- 使用者登出事件 ---- ---- ----
      AllChatroomSocket.on('logoutEvent', (userData) => {
        //  userLogin 顯示邏輯 --- 
        const userStatus = document.createElement('li')
        userStatus.className = 'li-status-message'
        userStatus.innerHTML =
          `
          <span class="span-status-message">
            ${userData.name} 離線了
          </span>
          `
        messagesDOM.appendChild(userStatus)
        scrollbarRegion.scrollTo(0, document.body.scrollHeight)
      })

    </script>
    <!--socketIo script 姞束-->
  </div>
</section>